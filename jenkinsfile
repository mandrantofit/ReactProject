#!/bin/bash

# Définir les variables d'environnement
SSH_KEY_JENKINS="~/.ssh/id_rsa" # Clés de Jenkins pour se connecter à cpadmin
SSH_KEY_LOCAL="~/.ssh/id_rsa_local" # Clés de cpadmin pour puller le remote "local" de mandrantofit

DEPLOY_USER="cpadmin"
DEPLOY_SERVER="172.25.52.205"
PROJECT_DIR="/home/cpadmin/ReactProject"
FRONTEND_DIR="${PROJECT_DIR}/frontend"
BACKEND_DIR="${PROJECT_DIR}/backend"
GIT_REPO_LOCAL="local" # Remote local de mandrantofit
GIT_PATH="mandrantofit@172.25.52.67:/home/mandrantofit/Documents/ReactProject" # Chemin du dépôt Git
GIT_BRANCH="main"

# Étape 1: Cloner ou mettre à jour le dépôt Git
echo "Cloning or pulling repository..."
if [ ! -d "ReactProject" ]; then
    git clone "${GIT_PATH}" # Clone à partir de mandrantofit
    cd ReactProject || exit 1
else
    cd ReactProject || exit 1
    git pull "${GIT_REPO_LOCAL}" "${GIT_BRANCH}" # Utilise le remote local
fi

# Étape 2: Installation des dépendances pour le backend
echo "Installing npm dependencies for backend..."
cd backend || exit 1
npm install || { echo "Backend npm install failed."; exit 1; }

# Étape 3: Déployer l'application sur le serveur Debian
echo "Deploying application to Debian server..."

# SSH et déploiement de l'application (frontend et backend)
ssh -i "${SSH_KEY_JENKINS}" "${DEPLOY_USER}@${DEPLOY_SERVER}" << EOF
    # Aller dans le répertoire du projet
    cd ${PROJECT_DIR} || exit 1

    # Tirer les dernières modifications du dépôt Git
    echo "Pulling latest changes..."
    git pull ${GIT_REPO_LOCAL} ${GIT_BRANCH} || exit 1

    # Déployer le frontend
    echo "Deploying frontend..."
    cd ${FRONTEND_DIR} || exit 1
    npm install || { echo "Frontend npm install failed."; exit 1; }

    # Si l'installation passe, procéder au build du frontend
    if npm run build; then
        echo "Frontend build succeeded."
    else
        echo "Frontend build failed, skipping frontend deployment."
        exit 1
    fi

    # Déployer le backend
    echo "Deploying backend..."
    cd ${BACKEND_DIR} || exit 1
    npm install || { echo "Backend npm install failed."; exit 1; }
EOF#!/bin/bash

# Définir les variables d'environnement
SSH_KEY_JENKINS="~/.ssh/id_rsa" # Clés de Jenkins pour se connecter à cpadmin
SSH_KEY_LOCAL="~/.ssh/id_rsa_local" # Clés de cpadmin pour puller le remote "local" de mandrantofit

DEPLOY_USER="cpadmin"
DEPLOY_SERVER="172.25.52.205"
PROJECT_DIR="/home/cpadmin/ReactProject"
FRONTEND_DIR="${PROJECT_DIR}/frontend"
BACKEND_DIR="${PROJECT_DIR}/backend"
GIT_REPO_LOCAL="local" # Remote local de mandrantofit
GIT_PATH="mandrantofit@172.25.52.67:/home/mandrantofit/Documents/ReactProject" # Chemin du dépôt Git
GIT_BRANCH="main"

# Étape 1: Cloner ou mettre à jour le dépôt Git
echo "Cloning or pulling repository..."
if [ ! -d "ReactProject" ]; then
    git clone "${GIT_PATH}" # Clone à partir de mandrantofit
    cd ReactProject || exit 1
else
    cd ReactProject || exit 1
    git pull "${GIT_REPO_LOCAL}" "${GIT_BRANCH}" # Utilise le remote local
fi

# Étape 2: Installation des dépendances pour le backend
echo "Installing npm dependencies for backend..."
cd backend || exit 1
npm install || { echo "Backend npm install failed."; exit 1; }

# Étape 3: Déployer l'application sur le serveur Debian
echo "Deploying application to Debian server..."

# SSH et déploiement de l'application (frontend et backend)
ssh -i "${SSH_KEY_JENKINS}" "${DEPLOY_USER}@${DEPLOY_SERVER}" << EOF
    # Aller dans le répertoire du projet
    cd ${PROJECT_DIR} || exit 1

    # Tirer les dernières modifications du dépôt Git
    echo "Pulling latest changes..."
    git pull ${GIT_REPO_LOCAL} ${GIT_BRANCH} || exit 1

    # Déployer le frontend
    echo "Deploying frontend..."
    cd ${FRONTEND_DIR} || exit 1
    npm install || { echo "Frontend npm install failed."; exit 1; }

    # Si l'installation passe, procéder au build du frontend
    if npm run build; then
        echo "Frontend build succeeded."
    else
        echo "Frontend build failed, skipping frontend deployment."
        exit 1
    fi

    # Déployer le backend
    echo "Deploying backend..."
    cd ${BACKEND_DIR} || exit 1
    npm install || { echo "Backend npm install failed."; exit 1; }
EOF

# Post-process: Afficher le succès ou l'échec
if [ $? -eq 0 ]; then
    echo "Build and deployment successful!"
else
    echo "Build or deployment failed."
    exit 1
fi


# Post-process: Afficher le succès ou l'échec
if [ $? -eq 0 ]; then
    echo "Build and deployment successful!"
else
    echo "Build or deployment failed."
    exit 1
fi
